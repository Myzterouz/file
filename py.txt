import psutil
import time
import pyodbc

server = 'Myzterouz' 
database = 'LocalDB' 
username = 'sa' 
password = 'Pass1234!' 
# ENCRYPT defaults to yes starting in ODBC Driver 18. It's good to always specify ENCRYPT=yes on the client side to avoid MITM attacks.
cnxn = pyodbc.connect('DRIVER={SQL Server};SERVER='+server+';DATABASE='+database+';Trusted_Connection=yes;UID='+username+';PWD='+ password)
cursor = cnxn.cursor()

while 1==1:
    cpu_usage = psutil.cpu_percent()
    memory_usage = psutil.virtual_memory()[2]

    cpu_interrupts = psutil.cpu_stats()[1]
    cpu_calls = psutil.cpu_stats()[3]

    memory_used = psutil.virtual_memory()[3]
    memory_free = psutil.virtual_memory()[4]

    bytes_sent = psutil.net_io_counters()[0]
    bytes_received = psutil.net_io_counters()[1]

    disk_usage = psutil.disk_usage('/')[3]
    cursor.execute('insert into Performance values(getdate(),'
                   + str(cpu_usage) + ','
                   + str(memory_usage) + ','
                   + str(cpu_interrupts) + ','
                   + str(cpu_calls) + ','
                   + str(memory_used) + ','
                   + str(memory_free) + ','
                   + str(bytes_sent) + ','
                   + str(bytes_received) + ','
                   + str(disk_usage) + ')'
                   )
    cnxn.commit()
    print('insert into Performance values(getdate(),'
           + str(cpu_usage) + ','
           + str(memory_usage) + ','
           + str(cpu_interrupts) + ','
           + str(cpu_calls) + ','
           + str(memory_used) + ','
           + str(memory_free) + ','
           + str(bytes_sent) + ','
           + str(bytes_received) + ','
           + str(disk_usage) + ')')
    time.sleep(1)

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    USE [LocalDB]
GO

/****** Object:  Table [dbo].[Performance]    Script Date: 18/06/2023 9:37:04 pm ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Performance](
	[Time] [datetime] NULL,
	[cpu_usage] [numeric](5, 2) NULL,
	[memory_usage] [numeric](5, 2) NULL,
	[cpu_interrupts] [numeric](18, 0) NULL,
	[cpu_calls] [numeric](18, 0) NULL,
	[memory_used] [numeric](18, 0) NULL,
	[memory_free] [numeric](18, 0) NULL,
	[bytes_sent] [numeric](18, 0) NULL,
	[bytes_received] [numeric](18, 0) NULL,
	[disk_usage] [numeric](5, 2) NULL
) ON [PRIMARY]
GO









cpu_current_usage = CALCULATE(SUM(Query1[cpu_usage]),Query1[Time]=max(Query1[Time]))
disk_usage_latest = CALCULATE(sum(Query1[disk_usage]),Query1[Time] = MAX(Query1[Time]))
memory_usage_latest = CALCULATE(SUM(Query1[memory_usage]),Query1[Time]=MAX(Query1[Time] ))





javascript:(function(){
	var toolbar = document.querySelector('.toolbar.page-color.top-bottom-border');
		if (toolbar) {
			toolbar.style.setProperty('display', 'none', 'important');
			console.log("Toolbar hidden");
		}
	var header = document.querySelector('.main.navbar-fixed-top');
		if (header) {
			header.style.setProperty('display', 'none', 'important');
			console.log("Header hidden");
		}
	var subnav = document.querySelector('.subnav.navbar-fixed-top');
		if (subnav) {
			subnav.style.setProperty('display', 'none', 'important');
			console.log("Subnav hidden");
		}
	var iframe = document.querySelector('.viewer.pbi-frame');
	if (iframe) {
	  var iframeContent = iframe.contentWindow;
	  if (iframeContent) {
		var element = iframeContent.document.querySelector('[data-automation-type="explorationNavigationContent"]');
		if (element) {
		  element.style.display = 'none';
		}
		var exploreCanvas = iframeContent.document.querySelector('exploreCanvas.themeableElement.disableAnimations.stylableVisualContainerHeader.master-form-factor');
		if (exploreCanvas) {
		  exploreCanvas.style.setProperty('bottom', '0', 'important');
		}
	  }
	}
	refresh();
	function refresh() {	
	var refreshButton = document.querySelector('a[role="button"][alt="Refresh"]'); 
		if (refreshButton) { 
			refreshButton.click(); 
			console.log("Reloaded"); 
		} 
	}
	setInterval(refresh, 1000);
})();

